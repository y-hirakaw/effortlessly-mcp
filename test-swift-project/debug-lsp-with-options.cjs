#!/usr/bin/env node

/**
 * LSP Debug with Options
 * SourceKit-LSP„Å´ÊòéÁ§∫ÁöÑ„Å™„Ç™„Éó„Ç∑„Éß„É≥„ÇíÊåáÂÆö„Åó„Å¶„ÉÜ„Çπ„Éà
 */

const { spawn } = require('child_process');
const path = require('path');

async function debugLSPWithOptions() {
  console.log('üîç LSP Debug with Options Starting...');
  console.log('=====================================\n');

  const workspaceRoot = process.cwd();
  console.log(`üìÇ Workspace: ${workspaceRoot}`);

  // .build„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç
  const fs = require('fs');
  const buildPath = path.join(workspaceRoot, '.build');
  const buildExists = fs.existsSync(buildPath);
  console.log(`üèóÔ∏è .build directory exists: ${buildExists}`);
  
  if (buildExists) {
    const buildContents = fs.readdirSync(buildPath);
    console.log(`üìÅ .build contents: ${buildContents.join(', ')}`);
  }

  // Package.swift„ÅÆÂ≠òÂú®Á¢∫Ë™ç
  const packageSwiftPath = path.join(workspaceRoot, 'Package.swift');
  const packageExists = fs.existsSync(packageSwiftPath);
  console.log(`üì¶ Package.swift exists: ${packageExists}`);

  // SourceKit-LSP„ÇíÊòéÁ§∫ÁöÑ„Å™„Ç™„Éó„Ç∑„Éß„É≥„ÅßËµ∑Âãï
  console.log('üîå Starting SourceKit-LSP with explicit options...');
  
  const sourceKitPath = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp';
  const lspArgs = [
    '--configuration', 'debug',
    '--default-workspace-type', 'swiftPM',
    '--scratch-path', buildPath
  ];
  
  console.log(`üöÄ Starting: ${sourceKitPath} ${lspArgs.join(' ')}`);
  
  const lspProcess = spawn(sourceKitPath, lspArgs, {
    cwd: workspaceRoot,
    stdio: ['pipe', 'pipe', 'pipe'],
    env: {
      ...process.env,
      SOURCEKIT_LOGGING: '3'  // „Çà„ÇäË©≥Á¥∞„Å™„É≠„Ç∞
    }
  });

  let messageId = 1;
  let responseBuffer = '';
  let initializeCompleted = false;
  let totalResponses = 0;

  // „Éó„É≠„Çª„Çπ„ÅÆÁä∂ÊÖãÁõ£Ë¶ñ
  lspProcess.on('spawn', () => {
    console.log('‚úÖ SourceKit-LSP process spawned successfully');
  });

  lspProcess.on('error', (error) => {
    console.error('üí• Process spawn error:', error);
  });

  lspProcess.on('exit', (code, signal) => {
    console.log(`üîö SourceKit-LSP process exited with code ${code}, signal ${signal}`);
  });

  // Ê®ôÊ∫ñÂá∫Âäõ„Åã„Çâ„ÅÆÂøúÁ≠î„ÇíÁõ£Ë¶ñ
  lspProcess.stdout.on('data', (data) => {
    const chunk = data.toString();
    responseBuffer += chunk;
    totalResponses++;
    
    console.log(`üì• Raw LSP Output #${totalResponses} (${chunk.length} bytes):`);
    console.log(chunk);
    
    // LSP„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Éë„Éº„Çπ
    while (responseBuffer.includes('\\r\\n\\r\\n')) {
      const headerEndIndex = responseBuffer.indexOf('\\r\\n\\r\\n');
      const headers = responseBuffer.substring(0, headerEndIndex);
      
      const contentLengthMatch = headers.match(/Content-Length: (\\d+)/);
      if (contentLengthMatch) {
        const contentLength = parseInt(contentLengthMatch[1]);
        const messageStart = headerEndIndex + 4;
        
        if (responseBuffer.length >= messageStart + contentLength) {
          const messageContent = responseBuffer.substring(messageStart, messageStart + contentLength);
          responseBuffer = responseBuffer.substring(messageStart + contentLength);
          
          console.log('\\nüì® Parsed LSP Message:');
          console.log('Headers:', headers);
          console.log('Content:', messageContent);
          
          try {
            const parsedMessage = JSON.parse(messageContent);
            console.log('‚úÖ Parsed JSON:', JSON.stringify(parsedMessage, null, 2));
            
            // initializeÂøúÁ≠î„ÇíÊ§úÂá∫  
            if (parsedMessage.id === 1 && parsedMessage.result) {
              initializeCompleted = true;
              console.log('üéâ Initialize completed successfully!');
            }
            
          } catch (parseError) {
            console.error('‚ùå Failed to parse JSON:', parseError.message);
          }
          console.log('---\\n');
        } else {
          break;
        }
      } else {
        console.log('‚ö†Ô∏è No Content-Length found, raw data:', headers);
        break;
      }
    }
  });

  // Ê®ôÊ∫ñ„Ç®„É©„ÉºÂá∫Âäõ„ÇíÁõ£Ë¶ñ
  lspProcess.stderr.on('data', (data) => {
    const error = data.toString();
    console.log('‚ö†Ô∏è LSP Stderr:', error);
  });

  // LSP„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åô„ÇãÈñ¢Êï∞  
  function sendLSPMessage(method, params = {}, id = null) {
    const message = {
      jsonrpc: '2.0',
      method,
      params,
      ...(id !== null && { id })
    };
    
    const messageStr = JSON.stringify(message);
    const messageWithHeaders = `Content-Length: ${Buffer.byteLength(messageStr)}\\r\\n\\r\\n${messageStr}`;
    
    console.log(`\\nüì§ Sending LSP Message: ${method}${id ? ` (ID: ${id})` : ''}`);
    console.log('JSON:', messageStr);
    console.log('---');
    
    lspProcess.stdin.write(messageWithHeaders);
  }

  try {
    // „Éó„É≠„Çª„ÇπËµ∑Âãï„ÇíÂ∞ë„ÅóÂæÖ„Å§
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 1. Initialize request („Çà„ÇäË©≥Á¥∞„Å™ capabilities)
    console.log('\\n1Ô∏è‚É£ Sending initialize request...');
    sendLSPMessage('initialize', {
      processId: process.pid,
      rootPath: workspaceRoot,
      rootUri: `file://${workspaceRoot}`,
      capabilities: {
        workspace: {
          applyEdit: true,
          workspaceEdit: {
            documentChanges: true
          },
          didChangeConfiguration: {
            dynamicRegistration: true
          },
          didChangeWatchedFiles: {
            dynamicRegistration: true
          },
          symbol: {
            dynamicRegistration: true,
            symbolKind: {
              valueSet: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
            }
          },
          executeCommand: {
            dynamicRegistration: true
          }
        },
        textDocument: {
          publishDiagnostics: {
            relatedInformation: true
          },
          synchronization: {
            dynamicRegistration: true,
            willSave: true,
            willSaveWaitUntil: true,
            didSave: true
          },
          completion: {
            dynamicRegistration: true,
            contextSupport: true,
            completionItem: {
              snippetSupport: true,
              commitCharactersSupport: true,
              documentationFormat: ["markdown", "plaintext"]
            }
          }
        }
      },
      initializationOptions: {},
      trace: 'verbose'
    }, messageId++);

    // ÂàùÊúüÂåñÂøúÁ≠î„ÇíÂæÖ„Å§
    let attempts = 0;
    while (!initializeCompleted && attempts < 15) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      attempts++;
      console.log(`‚è≥ Waiting for initialize response... (${attempts}/15)`);
    }

    if (!initializeCompleted) {
      console.log('‚ùå Initialize failed or timed out');
      console.log(`üìä Total responses received: ${totalResponses}`);
      return;
    }

    // 2. Initialized notification
    console.log('\\n2Ô∏è‚É£ Sending initialized notification...');
    sendLSPMessage('initialized', {});

    // Â∞ë„ÅóÂæÖ„Å§
    await new Promise(resolve => setTimeout(resolve, 3000));

    // 3. workspace/symbol query
    console.log('\\n3Ô∏è‚É£ Sending workspace/symbol query...');
    sendLSPMessage('workspace/symbol', {
      query: 'DataManager'
    }, messageId++);

    // ÂøúÁ≠î„ÇíÂæÖ„Å§
    await new Promise(resolve => setTimeout(resolve, 10000));

  } finally {
    // „Éó„É≠„Çª„ÇπÁµÇ‰∫Ü
    console.log('\\nüîå Terminating LSP process...');
    lspProcess.kill('SIGTERM');
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (!lspProcess.killed) {
      console.log('üî• Force killing LSP process...');
      lspProcess.kill('SIGKILL');
    }
  }
  
  console.log(`‚úÖ Debug session completed. Total responses: ${totalResponses}`);
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// „ÉÜ„Çπ„ÉàÂÆüË°å
debugLSPWithOptions().catch(error => {
  console.error('üí• Debug failed:', error);
  process.exit(1);
});